{"ast":null,"code":"var _jsxFileName = \"/media/fari/Works/1-sample-work/spotify/src/App.js\";\nimport React from \"react\";\nimport axios from 'axios';\nimport Aside from \"./components/aside/aside\";\nimport Content from \"./components/content/content\";\nimport Header from \"./components/header/header\";\nimport Footer from \"./components/footer/footer\";\nimport \"./App.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.access_token = \"BQAtSgTwch_5C8I_I6EOZMkemw7er54I3KcA3ok9znQUXslxlGnc8tpQP5oUalvpiq8Iul_Ljt4KcPq6f4foV_q8uGDmeF5ujJa7O8f_R0re_bn2uZAmYBUBfkH6hDxh2w7xUc_v9PglgunbaPRYfTUu4da86vkOShg\";\n    this.headers = {\n      'Authorization': `Bearer ${this.access_token}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n    this.state = {\n      currentPage: \"home\",\n      searchText: \"\",\n      isLoaded: false,\n      offset: 0,\n      play: {\n        section: '',\n        idx: null,\n        active: false\n      },\n      track: {\n        image: \"arash.jpeg\",\n        trackName: \"harchi_1\",\n        trackUrl: \"harchi_1.mp3\",\n        singerName: \"Arash\"\n      },\n      data: {\n        recently: {\n          id: 1,\n          title: \"Recently played\",\n          tracks: [// {\n            //   image: \"Katy_Perry_Smile.png\",\n            //   singerName: \"Kety Perry\",\n            //   albumsName: \"smile\",\n            // },\n            // {\n            //   image: \"arash.jpeg\",\n            //   singerName: \"Arash\",\n            //   albumsName: \"harchi\",\n            // },\n            // {\n            //   image: \"alesso.jpeg\",\n            //   singerName: \"alesso\",\n            //   albumsName: \"chert\",\n            // },\n          ]\n        },\n        all: {\n          id: 2,\n          title: \"Tracks list\",\n          tracks: [// {\n            //   image: \"Katy_Perry_Smile.png\",\n            //   singerName: \"Kety Perry\",\n            //   albumsName: \"smile\",\n            // },\n            // {\n            //   image: \"arash.jpeg\",\n            //   singerName: \"Arash\",\n            //   albumsName: \"harchi\",\n            // },\n            // {\n            //   image: \"alesso.jpeg\",\n            //   singerName: \"alesso\",\n            //   albumsName: \"chert\",\n            // },\n            // {\n            //   image: \"rap.jpg\",\n            //   singerName: \"Adel\",\n            //   albumsName: \"adel\",\n            // },\n            // {\n            //   image: \"arash.jpeg\",\n            //   singerName: \"Arash\",\n            //   albumsName: \"harchi\",\n            // },\n            // {\n            //   image: \"alesso.jpeg\",\n            //   singerName: \"alesso\",\n            //   albumsName: \"chert\",\n            // }\n          ]\n        }\n      },\n      artists: {}\n    };\n\n    this.handleAsideClick = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.loadArtist = artistName => {\n      const params = `q=${artistName}&type=artist&offset=${this.state.offset}&limit=6`;\n      axios.get(`https://api.spotify.com/v1/search?${params}`, {\n        headers: this.headers\n      }).then(async res => {\n        if (res.data) {\n          const artistsIdList = res.data.artists.items.map(item => item.id);\n          const artists = {};\n\n          for (const artistId of artistsIdList) {\n            artists[artistId] = await this.loadAlbums(artistId);\n          }\n\n          this.setState({\n            artists: artists\n          }, () => {\n            this.renderAlbums();\n          });\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.loadAlbums = async artistId => {\n      const res = await axios.get(`https://api.spotify.com/v1/artists/${artistId}/albums`, {\n        headers: this.headers\n      });\n\n      if (res.data) {\n        const albums = res.data.items;\n        const albumsList = albums.map(item => {\n          return {\n            album_id: item.id,\n            image_url: item.images[1].url,\n            name: item.name,\n            artist: item.artists[0].type,\n            is_loaded: false\n          };\n        });\n        return albumsList;\n      }\n    };\n\n    this.renderAlbums = () => {\n      let artists = { ...this.state.artists\n      };\n      let data = { ...this.state.data\n      };\n      let tracks = [];\n      console.log(artists);\n\n      for (const artist of artists) {\n        console.log(artist);\n\n        if (!artist.is_loaded) {\n          artist['is_loaded'] = true;\n          tracks.push({\n            image: artist.image_url,\n            singerName: artist.name,\n            albumsName: artist.artist\n          });\n          if (tracks.length === 6) break;\n        }\n      }\n\n      data.all.tracks = tracks;\n      this.setState({\n        artists: artists,\n        data: data\n      });\n    };\n\n    this.loadMore = () => {\n      this.loadArtist();\n      return;\n      let newTracks = [...this.state.data];\n      let newData = [newTracks.all.tracks];\n      newData = [...newData, ...newData];\n      newTracks.all.tracks = newData;\n      this.setState({\n        data: newTracks\n      });\n      console.log(\"loadMore: \", newTracks);\n    };\n\n    this.playMusic = (title, idx) => {\n      let newData = { ...this.state.data\n      };\n      let newRecentlyTracks = [...newData.recently.tracks];\n\n      if (title == 'Recently played') {\n        const removedTrack = newRecentlyTracks.splice(idx, 1);\n        newRecentlyTracks = [removedTrack[0], ...newRecentlyTracks];\n      } else if (title == \"Tracks list\") {\n        const selectedTrackFromAll = this.state.data.all.tracks[idx];\n        newRecentlyTracks = [selectedTrackFromAll, ...newRecentlyTracks];\n      }\n\n      let newPlay = { ...this.state.play\n      };\n      let isPlaying = true;\n\n      if (idx === 0 && title === \"Recently played\") {\n        isPlaying = !this.state.data.recently.isPlaying;\n      }\n\n      newPlay.section = title;\n      newPlay.idx = idx;\n      newPlay.active = isPlaying;\n      newRecentlyTracks = newRecentlyTracks.slice(0, 6);\n      newData.recently.tracks = newRecentlyTracks;\n      newData.recently.isPlaying = isPlaying;\n      this.setState({\n        play: newPlay\n      }, () => {\n        console.log(this.state.play);\n      });\n      this.setState({\n        data: newData\n      }, () => {\n        console.log(this.state.play);\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Aside, {\n        action: this.handleAsideClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        page: this.state.currentPage,\n        title: this.state.currentPage,\n        action: this.loadArtist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        data_app: this.state.data,\n        scroll_app: this.loadMore,\n        playMusic_app: this.playMusic,\n        play_app: this.state.play\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        data: this.state.track\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/media/fari/Works/1-sample-work/spotify/src/App.js"],"names":["React","axios","Aside","Content","Header","Footer","App","Component","constructor","props","access_token","headers","state","currentPage","searchText","isLoaded","offset","play","section","idx","active","track","image","trackName","trackUrl","singerName","data","recently","id","title","tracks","all","artists","handleAsideClick","page","setState","loadArtist","artistName","params","get","then","res","artistsIdList","items","map","item","artistId","loadAlbums","renderAlbums","catch","err","console","log","albums","albumsList","album_id","image_url","images","url","name","artist","type","is_loaded","push","albumsName","length","loadMore","newTracks","newData","playMusic","newRecentlyTracks","removedTrack","splice","selectedTrackFromAll","newPlay","isPlaying","slice","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from 'axios';\nimport Aside from \"./components/aside/aside\";\nimport Content from \"./components/content/content\";\nimport Header from \"./components/header/header\";\nimport Footer from \"./components/footer/footer\";\n\nimport \"./App.scss\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  access_token = \"BQAtSgTwch_5C8I_I6EOZMkemw7er54I3KcA3ok9znQUXslxlGnc8tpQP5oUalvpiq8Iul_Ljt4KcPq6f4foV_q8uGDmeF5ujJa7O8f_R0re_bn2uZAmYBUBfkH6hDxh2w7xUc_v9PglgunbaPRYfTUu4da86vkOShg\";\n  headers = {\n    'Authorization': `Bearer ${this.access_token}`,\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  };\n\n  state = {\n    currentPage: \"home\",\n    searchText: \"\",\n    isLoaded: false,\n    offset: 0,\n    play: {\n      section: '',\n      idx: null,\n      active: false,\n    },\n    track: {\n      image: \"arash.jpeg\",\n      trackName: \"harchi_1\",\n      trackUrl: \"harchi_1.mp3\",\n      singerName: \"Arash\"\n    },\n    data: {\n      recently: {\n        id: 1,\n        title: \"Recently played\",\n        tracks: [\n          // {\n          //   image: \"Katy_Perry_Smile.png\",\n          //   singerName: \"Kety Perry\",\n          //   albumsName: \"smile\",\n          // },\n          // {\n          //   image: \"arash.jpeg\",\n          //   singerName: \"Arash\",\n          //   albumsName: \"harchi\",\n          // },\n          // {\n          //   image: \"alesso.jpeg\",\n          //   singerName: \"alesso\",\n          //   albumsName: \"chert\",\n          // },\n        ]\n      },\n      all: {\n        id: 2,\n        title: \"Tracks list\",\n        tracks: [\n          // {\n          //   image: \"Katy_Perry_Smile.png\",\n          //   singerName: \"Kety Perry\",\n          //   albumsName: \"smile\",\n          // },\n          // {\n          //   image: \"arash.jpeg\",\n          //   singerName: \"Arash\",\n          //   albumsName: \"harchi\",\n          // },\n          // {\n          //   image: \"alesso.jpeg\",\n          //   singerName: \"alesso\",\n          //   albumsName: \"chert\",\n          // },\n          // {\n          //   image: \"rap.jpg\",\n          //   singerName: \"Adel\",\n          //   albumsName: \"adel\",\n          // },\n          // {\n          //   image: \"arash.jpeg\",\n          //   singerName: \"Arash\",\n          //   albumsName: \"harchi\",\n          // },\n          // {\n          //   image: \"alesso.jpeg\",\n          //   singerName: \"alesso\",\n          //   albumsName: \"chert\",\n          // }\n        ]\n      }\n    },\n    artists: {}\n  };\n\n  handleAsideClick = (page) => {\n    this.setState({\n      currentPage: page,\n    });\n  };\n\n  loadArtist = (artistName) => {\n    const params = `q=${artistName}&type=artist&offset=${this.state.offset}&limit=6`;\n\n    axios.get(\n      `https://api.spotify.com/v1/search?${params}`,\n      { headers: this.headers }\n    ).then(async res => {\n      if (res.data) {\n        const artistsIdList = res.data.artists.items.map(item => item.id);\n        const artists = {};\n        for (const artistId of artistsIdList) {\n          artists[artistId] = await this.loadAlbums(artistId);\n        }\n        this.setState({\n          artists: artists\n        }, () => {\n          this.renderAlbums();\n        });\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  loadAlbums = async (artistId) => {\n    const res = await axios.get(\n      `https://api.spotify.com/v1/artists/${artistId}/albums`,\n      { headers: this.headers }\n    );\n    if (res.data) {\n      const albums = res.data.items;\n      const albumsList = albums.map(item => {\n        return {\n          album_id: item.id,\n          image_url: item.images[1].url,\n          name: item.name,\n          artist: item.artists[0].type,\n          is_loaded: false,\n        }\n      });\n      return albumsList;\n    }\n  }\n\n  renderAlbums = () => {\n    let artists = { ...this.state.artists };\n    let data = { ... this.state.data };\n    let tracks = [];\n\n    console.log(artists);\n\n    for (const artist of artists) {\n      console.log(artist);\n      if (!artist.is_loaded) {\n        artist['is_loaded'] = true;\n        tracks.push({\n          image: artist.image_url,\n          singerName: artist.name,\n          albumsName: artist.artist,\n        });\n        if (tracks.length === 6) break;\n      }\n    }\n\n    data.all.tracks = tracks;\n\n    this.setState({\n      artists: artists,\n      data: data,\n    })\n  }\n\n  loadMore = () => {\n    this.loadArtist();\n    return\n\n    let newTracks = [...this.state.data];\n    let newData = [newTracks.all.tracks];\n    newData = [...newData, ...newData];\n    newTracks.all.tracks = newData;\n\n    this.setState({\n      data: newTracks,\n    });\n\n    console.log(\"loadMore: \", newTracks)\n  }\n\n  playMusic = (title, idx) => {\n    let newData = { ...this.state.data };\n    let newRecentlyTracks = [...newData.recently.tracks];\n\n    if (title == 'Recently played') {\n      const removedTrack = newRecentlyTracks.splice(idx, 1);\n      newRecentlyTracks = [removedTrack[0], ...newRecentlyTracks];\n    } else if (title == \"Tracks list\") {\n      const selectedTrackFromAll = this.state.data.all.tracks[idx];\n      newRecentlyTracks = [selectedTrackFromAll, ...newRecentlyTracks];\n    }\n\n    let newPlay = { ...this.state.play };\n\n    let isPlaying = true;\n    if (idx === 0 && title === \"Recently played\") {\n      isPlaying = !this.state.data.recently.isPlaying;\n    }\n\n    newPlay.section = title;\n    newPlay.idx = idx;\n    newPlay.active = isPlaying;\n\n    newRecentlyTracks = newRecentlyTracks.slice(0, 6);\n    newData.recently.tracks = newRecentlyTracks;\n    newData.recently.isPlaying = isPlaying;\n\n    this.setState({\n      play: newPlay,\n    }, () => {\n      console.log(this.state.play)\n    });\n\n\n    this.setState({\n      data: newData,\n    }, () => {\n      console.log(this.state.play)\n    });\n\n  }\n\n  render() {\n    return (\n      <>\n        <Aside action={this.handleAsideClick} />\n        <Header\n          page={this.state.currentPage}\n          title={this.state.currentPage}\n          action={this.loadArtist}\n        />\n        <Content\n          data_app={this.state.data}\n          scroll_app={this.loadMore}\n          playMusic_app={this.playMusic}\n          play_app={this.state.play}\n        />\n        <Footer data={this.state.track} />\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}